#!/usr/bin/env python3
import json
import logging
from models import Tool, ToolType, ApiRequest, Api
from openai_helper import OpenAIHelper
import pytest
from typing import Dict, Any, List
import uuid

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Sample data for tests
def create_sample_web_search_tool():
    return Tool(
        id=str(uuid.uuid4()),
        name="web_search",
        description="Search the web",
        type=ToolType.WEB_SEARCH,
        tool_type=ToolType.WEB_SEARCH,
        function_schema={
            "user_location": {"type": "approximate", "country": "US"},
            "search_context_size": "medium"
        },
        configuration={},
    )

def create_sample_function_tool():
    return Tool(
        id=str(uuid.uuid4()),
        name="sample_function",
        description="A sample function",
        type=ToolType.FUNCTION,
        tool_type=ToolType.FUNCTION,
        function_schema={
            "name": "sample_function",
            "description": "A sample function",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "The search query"
                    }
                },
                "required": ["query"]
            }
        },
        configuration={},
    )

def create_sample_api_linked_tool():
    api_id = str(uuid.uuid4())
    api_request_id = str(uuid.uuid4())
    
    api = Api(
        id=api_id,
        server="https://api.example.com",
        service="Example API",
        provider="Example Provider",
        version="1.0",
        description="API for testing",
        processed=True
    )
    
    api_request = ApiRequest(
        id=api_request_id,
        api_id=api_id,
        path="/test-endpoint",
        method="POST",
        description="Test endpoint for API",
        request_body_schema={
            "type": "object",
            "properties": {
                "param1": {"type": "string"},
                "param2": {"type": "integer"}
            },
            "required": ["param1"]
        }
    )
    
    # Set up the relationship manually for testing
    api_request.api = api
    
    tool = Tool(
        id=str(uuid.uuid4()),
        name="api_test",
        description="Test API endpoint",
        type=ToolType.FUNCTION,
        tool_type=ToolType.FUNCTION,
        api_request_id=api_request_id,
        function_schema=None,  # This should be generated by the formatter
        configuration={}
    )
    
    # Set up the relationship manually for testing
    tool.api_request = api_request
    
    return tool

def test_format_web_search_tool():
    """Test formatting a web search tool for OpenAI API"""
    helper = OpenAIHelper("fake-api-key")
    tool = create_sample_web_search_tool()
    
    formatted_tools = helper.format_tools_for_openai([tool])
    
    assert len(formatted_tools) == 1
    assert formatted_tools[0]["type"] == "web_search_preview"
    assert "user_location" in formatted_tools[0]
    assert formatted_tools[0]["user_location"]["country"] == "US"
    assert "search_context_size" in formatted_tools[0]
    
    logger.info(f"✓ Web search tool correctly formatted as: {json.dumps(formatted_tools[0])}")

def test_format_function_tool():
    """Test formatting a function tool for OpenAI API"""
    helper = OpenAIHelper("fake-api-key")
    tool = create_sample_function_tool()
    
    formatted_tools = helper.format_tools_for_openai([tool])
    
    assert len(formatted_tools) == 1
    assert formatted_tools[0]["type"] == "function"
    assert formatted_tools[0]["function"]["name"] == "sample_function"
    assert "parameters" in formatted_tools[0]["function"]
    assert formatted_tools[0]["function"]["parameters"]["required"] == ["query"]
    
    logger.info(f"✓ Function tool correctly formatted as: {json.dumps(formatted_tools[0])}")

def test_function_tool_without_name():
    """Test that a function tool without a name in schema gets the name from the tool object"""
    helper = OpenAIHelper("fake-api-key")
    tool = create_sample_function_tool()
    # Remove name from schema but keep it on the tool
    tool.function_schema.pop("name")
    
    formatted_tools = helper.format_tools_for_openai([tool])
    
    assert len(formatted_tools) == 1
    assert formatted_tools[0]["function"]["name"] == "sample_function"
    
    logger.info(f"✓ Function tool without name in schema correctly gets name from tool object")

def test_missing_params():
    """Test that a function tool without parameters gets default empty parameters object"""
    helper = OpenAIHelper("fake-api-key")
    tool = create_sample_function_tool()
    # Remove parameters from schema
    tool.function_schema.pop("parameters")
    
    formatted_tools = helper.format_tools_for_openai([tool])
    
    assert len(formatted_tools) == 1
    assert "parameters" in formatted_tools[0]["function"]
    assert formatted_tools[0]["function"]["parameters"]["type"] == "object"
    assert "properties" in formatted_tools[0]["function"]["parameters"]
    
    logger.info(f"✓ Function tool with missing parameters gets default parameters object")

def test_api_linked_tool():
    """Test formatting a tool linked to an API request with request body schema"""
    helper = OpenAIHelper("fake-api-key")
    tool = create_sample_api_linked_tool()
    
    formatted_tools = helper.format_tools_for_openai([tool])
    
    assert len(formatted_tools) == 1
    assert formatted_tools[0]["type"] == "function"
    assert "name" in formatted_tools[0]["function"]
    assert formatted_tools[0]["function"]["name"] == "api_test"
    assert "parameters" in formatted_tools[0]["function"]
    assert "properties" in formatted_tools[0]["function"]["parameters"]
    assert "param1" in formatted_tools[0]["function"]["parameters"]["properties"]
    assert "required" in formatted_tools[0]["function"]["parameters"]
    assert "param1" in formatted_tools[0]["function"]["parameters"]["required"]
    
    logger.info(f"✓ API-linked tool correctly formatted with parameters from request schema")

def test_mixed_tools():
    """Test formatting a mix of different tool types"""
    helper = OpenAIHelper("fake-api-key")
    web_tool = create_sample_web_search_tool()
    function_tool = create_sample_function_tool()
    api_tool = create_sample_api_linked_tool()
    
    formatted_tools = helper.format_tools_for_openai([web_tool, function_tool, api_tool])
    
    assert len(formatted_tools) == 3
    # First should be web search
    assert formatted_tools[0]["type"] == "web_search_preview"
    # Second should be function
    assert formatted_tools[1]["type"] == "function"
    assert formatted_tools[1]["function"]["name"] == "sample_function"
    # Third should be API-linked function
    assert formatted_tools[2]["type"] == "function"
    assert formatted_tools[2]["function"]["name"] == "api_test"
    
    logger.info(f"✓ Multiple tool types correctly formatted")

if __name__ == "__main__":
    test_format_web_search_tool()
    test_format_function_tool()
    test_function_tool_without_name()
    test_missing_params()
    test_api_linked_tool()
    test_mixed_tools()
    logger.info("All tests passed!") 